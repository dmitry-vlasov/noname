import string;
import bytecode;
import nvm;

export {
	exec(code : [Bytecode], nvm : NVM) -> void;
}

arithmBinOp(nvm : NVM, op : (int, int) -> int) -> void {
	a = popStackInt(nvm);
	b = popStackInt(nvm);
	pushStack(NValInt(op(a, b)), nvm);
}

compareBinOp(nvm : NVM, op : (int, int) -> bool) -> void {
	a = popStackInt(nvm);
	b = popStackInt(nvm);
	pushStack(NValBool(op(a, b)), nvm);
}

exec(code : [Bytecode], nvm : NVM) -> void {
	next = \-> {
		nvm.pc ::= nvm.pc + 1;
		exec(code, nvm);
	}
	if (length(^(nvm.errors)) == 0) {
		if (nvm.pc >= length(code)) {
			nvm.onError("nvm.pc >= length(code): " + i2s(nvm.pc) + " >= " + i2s(length(code)));
		} else {
			switch (code[nvm.pc]) {
				BLoad(addr): {
					if (addr >= length(nvm.heapMem)) {
						nvm.onError("addr >= length(nvm.heapMem): " + i2s(addr) + " >= " + i2s(length(nvm.heapMem)));
					} else {
						pushStack(^(nvm.heapMem[addr]), nvm);
						next();
					}
				}
				BStore(addr): {
					if (addr >= length(nvm.heapMem)) {
						nvm.onError("addr >= length(nvm.heapMem): " + i2s(addr) + " >= " + i2s(length(nvm.heapMem)));
					} else {
						nvm.heapMem[addr] := popStack(nvm);
						next();
					}
				}
				BGoto(addr): {
					nvm.pc ::= addr;
					exec(code, nvm);
				}
				BCond(addr1, addr2): {
					if (popStackBool(nvm)) {
						nvm.pc ::= addr1;
					} else {
						nvm.pc ::= addr2;
					}
					exec(code, nvm);
				}
				BPrintln(): {
					println(popStack(nvm));
					next();
				}
				BExit(): {
					// Return
				}
				BInt(val): {
					pushStack(NValInt(val), nvm);
					next();
				}
				BBool(val): {
					pushStack(NValBool(val), nvm);
					next();
				}
				BAdd(): {
					arithmBinOp(nvm, \x, y -> x + y);
					next();
				}
				BSubtr(): {
					arithmBinOp(nvm, \x, y -> x - y);
					next();
				}
				BMul(): {
					arithmBinOp(nvm, \x, y -> x * y);
					next();
				}
				BDiv(): {
					arithmBinOp(nvm, \x, y -> x / y);
					next();
				}
				BMod(): {
					arithmBinOp(nvm, \x, y -> x % y);
					next();
				}
				BEq(): {
					compareBinOp(nvm, \x, y -> x == y);
					next();
				}
				BLess(): {
					compareBinOp(nvm, \x, y -> x < y);
					next();
				}
			}
		}
	}
}