import runtime;
import ds/list;
import ds/array;

export {
	NVal ::= NValBool, NValInt, NValArr, NValUndef;
		NValUndef();
		NValBool(val : bool);
		NValInt(val : int);
		NValArr(val : [NVal]);

	StackFrame(
		args : [NVal],
		locals : [NVal]
	);

	NVM(
		heapMem : [ref NVal],
		stackMem : [ref NVal],
		mutable stackTop : int,
		mutable pc : int,
		errors : ref [string],
		onError : (string) -> void, 
	);

	makeNVM(stackSize : int, heapSize : int) -> NVM;
	popStack(nvm : NVM) -> NVal;
	pushStack(val : NVal, nvm : NVM) -> void;

	popStackInt(nvm : NVM) -> int;
	popStackBool(nvm : NVM) -> bool;
}

makeNVM(stackSize : int, heapSize : int) -> NVM {
	errors = ref [];
	NVM(
		map(enumFromTo(0, heapSize - 1), \__ -> ref NValInt(0)),
		map(enumFromTo(0, stackSize - 1), \__ -> ref NValInt(0)),
		0, // stackTop
		0, // pc
		errors,
		\err -> {
			errors := concat(^errors, [err]);
			println(err);
		}
	);
}

popStack(nvm : NVM) -> NVal {
	nvm.stackTop ::= nvm.stackTop - 1;
	if (nvm.stackTop < 0) {
		nvm.onError("Popping empty stack");
		NValUndef();
	} else {
		^(nvm.stackMem[nvm.stackTop]);
	}
}

pushStack(val : NVal, nvm : NVM) -> void {
	nvm.stackMem[nvm.stackTop] := val;
	nvm.stackTop ::= nvm.stackTop + 1;
	if (nvm.stackTop >= length(nvm.stackMem)) {
		nvm.onError("Stack overflow");
	}
}

popStackInt(nvm : NVM) -> int {
	switch (popStack(nvm)) {
		NValInt(val): val;
		default: {
			nvm.onError("Integer value expected on stack");
			0;
		}
	}
}

popStackBool(nvm : NVM) -> bool {
	switch (popStack(nvm)) {
		NValBool(val): val;
		default: {
			nvm.onError("Boolean value expected on stack");
			false;
		}
	}
}